/*Generated by WaveMaker Studio*/

package com.vcs.highscoredb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.vcs.highscoredb.Table11;


/**
 * ServiceImpl object for domain model class Table11.
 *
 * @see Table11
 */
@Service("highscoredb.Table11Service")
public class Table11ServiceImpl implements Table11Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table11ServiceImpl.class);


    @Autowired
    @Qualifier("highscoredb.Table11Dao")
    private WMGenericDao<Table11, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table11, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "highscoredbTransactionManager")
    @Override
	public Table11 create(Table11 table11) {
        LOGGER.debug("Creating a new Table11 with information: {}", table11);
        Table11 table11Created = this.wmGenericDao.create(table11);
        return table11Created;
    }

	@Transactional(readOnly = true, value = "highscoredbTransactionManager")
	@Override
	public Table11 getById(Integer table11Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table11 by id: {}", table11Id);
        Table11 table11 = this.wmGenericDao.findById(table11Id);
        if (table11 == null){
            LOGGER.debug("No Table11 found with id: {}", table11Id);
            throw new EntityNotFoundException(String.valueOf(table11Id));
        }
        return table11;
    }

    @Transactional(readOnly = true, value = "highscoredbTransactionManager")
    @Override
    public Table11 getByColumn4(String column4) {
        Map<String, Object> column4Map = new HashMap<>();
        column4Map.put("column4", column4);

        LOGGER.debug("Finding Table11 by unique keys: {}", column4Map);
        Table11 table11 = this.wmGenericDao.findByUniqueKey(column4Map);

        if (table11 == null){
            LOGGER.debug("No Table11 found with given unique key values: {}", column4Map);
            throw new EntityNotFoundException(String.valueOf(column4Map));
        }

        return table11;
    }

    @Transactional(readOnly = true, value = "highscoredbTransactionManager")
    @Override
    public Table11 getByColumn4AndColumn3(String column4, String column3) {
        Map<String, Object> column4AndColumn3Map = new HashMap<>();
        column4AndColumn3Map.put("column4", column4);
        column4AndColumn3Map.put("column3", column3);

        LOGGER.debug("Finding Table11 by unique keys: {}", column4AndColumn3Map);
        Table11 table11 = this.wmGenericDao.findByUniqueKey(column4AndColumn3Map);

        if (table11 == null){
            LOGGER.debug("No Table11 found with given unique key values: {}", column4AndColumn3Map);
            throw new EntityNotFoundException(String.valueOf(column4AndColumn3Map));
        }

        return table11;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "highscoredbTransactionManager")
	@Override
	public Table11 update(Table11 table11) throws EntityNotFoundException {
        LOGGER.debug("Updating Table11 with information: {}", table11);
        this.wmGenericDao.update(table11);

        Integer table11Id = table11.getId();

        return this.wmGenericDao.findById(table11Id);
    }

    @Transactional(value = "highscoredbTransactionManager")
	@Override
	public Table11 delete(Integer table11Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table11 with id: {}", table11Id);
        Table11 deleted = this.wmGenericDao.findById(table11Id);
        if (deleted == null) {
            LOGGER.debug("No Table11 found with id: {}", table11Id);
            throw new EntityNotFoundException(String.valueOf(table11Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "highscoredbTransactionManager")
	@Override
	public Page<Table11> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table11s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "highscoredbTransactionManager")
    @Override
    public Page<Table11> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table11s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "highscoredbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service highscoredb for table Table11 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "highscoredbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


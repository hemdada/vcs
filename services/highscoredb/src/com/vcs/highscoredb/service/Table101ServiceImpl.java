/*Generated by WaveMaker Studio*/

package com.vcs.highscoredb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.vcs.highscoredb.Table101;


/**
 * ServiceImpl object for domain model class Table101.
 *
 * @see Table101
 */
@Service("highscoredb.Table101Service")
public class Table101ServiceImpl implements Table101Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table101ServiceImpl.class);


    @Autowired
    @Qualifier("highscoredb.Table101Dao")
    private WMGenericDao<Table101, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table101, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "highscoredbTransactionManager")
    @Override
	public Table101 create(Table101 table101) {
        LOGGER.debug("Creating a new Table101 with information: {}", table101);
        Table101 table101Created = this.wmGenericDao.create(table101);
        return table101Created;
    }

	@Transactional(readOnly = true, value = "highscoredbTransactionManager")
	@Override
	public Table101 getById(Integer table101Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table101 by id: {}", table101Id);
        Table101 table101 = this.wmGenericDao.findById(table101Id);
        if (table101 == null){
            LOGGER.debug("No Table101 found with id: {}", table101Id);
            throw new EntityNotFoundException(String.valueOf(table101Id));
        }
        return table101;
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "highscoredbTransactionManager")
	@Override
	public Table101 update(Table101 table101) throws EntityNotFoundException {
        LOGGER.debug("Updating Table101 with information: {}", table101);
        this.wmGenericDao.update(table101);

        Integer table101Id = table101.getId();

        return this.wmGenericDao.findById(table101Id);
    }

    @Transactional(value = "highscoredbTransactionManager")
	@Override
	public Table101 delete(Integer table101Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table101 with id: {}", table101Id);
        Table101 deleted = this.wmGenericDao.findById(table101Id);
        if (deleted == null) {
            LOGGER.debug("No Table101 found with id: {}", table101Id);
            throw new EntityNotFoundException(String.valueOf(table101Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "highscoredbTransactionManager")
	@Override
	public Page<Table101> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table101s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "highscoredbTransactionManager")
    @Override
    public Page<Table101> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table101s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "highscoredbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service highscoredb for table Table101 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "highscoredbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}


/*Generated by WaveMaker Studio*/
package com.vcs.highscoredb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.vcs.highscoredb.Table101;
import com.vcs.highscoredb.service.Table101Service;
import com.wordnik.swagger.annotations.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table101.
 * @see Table101
 */
@RestController("highscoredb.Table101Controller")
@RequestMapping("/highscoredb/Table101")
@Api(description = "Exposes APIs to work with Table101 resource.", value = "Table101Controller")
public class Table101Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table101Controller.class);

    @Autowired
    @Qualifier("highscoredb.Table101Service")
    private Table101Service table101Service;

    /**
     * @deprecated Use {@link #findTable101s(String, Pageable)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table101 instances matching the search criteria.")
    public Page<Table101> findTable101s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table101s list");
        return table101Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table101 instances matching the search criteria.")
    public Page<Table101> findTable101s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table101s list");
        return table101Service.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportTable101s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table101Service.export(exportType, query, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table101Service instance
	 */
    protected void setTable101Service(Table101Service service) {
        this.table101Service = service;
    }

    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Table101 instance.")
    public Table101 createTable101(@RequestBody Table101 table101) {
        LOGGER.debug("Create Table101 with information: {}", table101);
        table101 = table101Service.create(table101);
        LOGGER.debug("Created Table101 with information: {}", table101);
        return table101;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table101 instances.")
    public Long countTable101s(@RequestParam(value = "q", required = false) @ApiParam(value = "conditions to filter the results") String query) {
        LOGGER.debug("counting Table101s");
        return table101Service.count(query);
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Table101 instance associated with the given id.")
    public Table101 getTable101(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table101 with id: {}", id);
        Table101 foundTable101 = table101Service.getById(id);
        LOGGER.debug("Table101 details with id: {}", foundTable101);
        return foundTable101;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Table101 instance associated with the given id.")
    public Table101 editTable101(@PathVariable(value = "id") Integer id, @RequestBody Table101 table101) throws EntityNotFoundException {
        LOGGER.debug("Editing Table101 with id: {}", table101.getId());
        table101.setId(id);
        table101 = table101Service.update(table101);
        LOGGER.debug("Table101 details with id: {}", table101);
        return table101;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Table101 instance associated with the given id.")
    public boolean deleteTable101(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table101 with id: {}", id);
        Table101 deletedTable101 = table101Service.delete(id);
        return deletedTable101 != null;
    }
}
